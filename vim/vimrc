let mapleader="\\"
set encoding=utf-8

""Use Vim settings, rather then Vi settings (much better!).
"This must be first, because it changes other options as a side effect.
set nocompatible


""
"	formatting
""
set backspace=indent,eol,start  "backspace over everything in insert mode
set background=dark

"default indent settings
"see <http://vim.wikia.com/wiki/Converting_tabs_to_spaces>
set shiftwidth=4
set tabstop=4
set softtabstop=4
set noexpandtab
set noautoindent
set cc=80

"load ftplugins and indent files
filetype plugin on
filetype indent on
"turn on syntax highlighting
syntax on

"specify indent settings for all languages
autocmd filetype c,cpp,make,sh setlocal shiftwidth=8 tabstop=8 softtabstop=8 noexpandtab autoindent cc=80
autocmd filetype go setlocal shiftwidth=4 tabstop=4 softtabstop=4 noexpandtab autoindent cc=80
autocmd filetype markdown,conf,javascript,python setlocal shiftwidth=4 tabstop=4 softtabstop=4 expandtab autoindent cc=80
autocmd filetype nix,text,yaml setlocal shiftwidth=2 tabstop=2 softtabstop=2 expandtab autoindent cc=80

let g:yankring_history_dir = "~/.vim"


""
"	display/visual
""
set history=1000  "store lots of :cmdline history
set showcmd  "show incomplete cmds down the bottom
set showmode  "show current mode down the bottom
set number  "show line numbers

"display tabs and trailing spaces
set list
set listchars=tab:⋅\ ,trail:⋅,nbsp:⋅
"alternatives: » ˙ … ⋅

"undo settings
set undodir=~/.vim/undofiles
set undofile

set splitbelow

"FOLDS
"support indent toggle with 'za'
"	open all folds with zR
"	close all folds with zM
set foldmethod=syntax
nnoremap <space> za
"no folds open when opening a file
set foldlevel=20
"set foldmethod=indent   "fold based on indent
"set foldnestmax=3       "deepest fold is 3 levels
"set nofoldenable        "dont fold by default

"sanitize file selection
set wildmode=longest,list,full
set wildignore=*.o,*.obj,*~ "stuff to ignore when tab completing
set wildignore+=*\\tmp\\*,*.swp,*.swo,*.zip,.git
set wildmenu                "enable ctrl-n and ctrl-p to scroll thru matches
set completeopt+=longest

""tell the term has 256 colors
set t_Co=256

"hide buffers when not displayed
set hidden


""
"	per-plugin settings and keybindings
""

"make '=' reindent the whole file
nnoremap = ggVG=<C-o><C-o><CR>

"make '=' reindent the whole file
"nnoremap <C-g> ggVG<CR>

"make 'X' delete the buffer
nnoremap X :bdelete<CR>

"jump to last cursor position when opening a file
"dont do it when writing a commit log entry
autocmd BufReadPost * call SetCursorPosition()
function! SetCursorPosition()
    if &filetype !~ 'svn\|commit\c'
        if line("'\"") > 0 && line("'\"") <= line("$")
            exe "normal! g`\""
            normal! zz
        endif
    end
endfunction

let g:ctrlp_working_path_mode = 'ra'


""
" YCM (YouCompleteMe)
""
let g:ycm_always_populate_location_list = 1
let g:ycm_autoclose_preview_window_after_insertion = 0
let g:ycm_complete_in_comments = 1
" see ID completion with language keywords
let g:ycm_seed_identifiers_with_syntax = 1
let g:ycm_extra_conf_globlist = ['.ycm_extra_conf.py']

" new mapping approach: C-j
let g:ycm_key_list_select_completion = ['<c-j>']
let g:ycm_key_list_previous_completion = ['<c-k>']
""let g:ycm_key_list_select_completion = ['<TAB>', '<Down>'] " YCM original
"let g:ycm_key_list_select_completion = ['<Down>', '<Enter>']
""let g:ycm_key_list_previous_completion = ['<S-TAB>', '<Up>'] " YCM original
"let g:ycm_key_list_previous_completion = ['<Up>', '<Enter>']

nnoremap <F4> :YcmDiags<CR>
nnoremap <F5> :YcmForceCompileAndDiagnostics<CR>
" also, '<leader>d' will show detailed compiler errors

map <Leader>t :YcmCompleter GetType<CR>
map <Leader>f :YcmCompleter FixIt<CR>
" go there, jump back
map <Leader>g :YcmCompleter GoTo<CR>
map <Leader>h <C-O>

" not actually using jumplists
"" Jumplists (used by YCM GoTo)
"map <Leader>j :jumps<CR>
"map <Leader>0 <C-O>
"map <Leader>9 <C-I>


"UltiSnips
let g:UltiSnipsExpandTrigger='<S-Tab>'
let g:UltiSnipsJumpForwardTrigger='<S-Tab>'
"let g:UltiSnipsJumpForwardTrigger="<C-l>"
let g:UltiSnipsJumpBackwardTrigger="<C-h>"
" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"
let g:UltiSnipsSnippetDirectories=["ultisnips"]
let g:UltiSnipsSnippetsDir = "~/.vim/ultisnips"


"vim-snippets
let g:snips_author = "Sirio Balmelli"
let g:snips_email = "sirio@b-ad.ch"
let g:snips_github = "https://github.com/siriobalmelli"


"airline
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1


"indent_guides
let g:indent_guides_guide_size=1


"ale (replace syntastic)
" ale be all like "your C code doesn't comply with C++ .." TROLOLOL
let b:ale_linters = {'c': ['ccls']}


" SEARCH - thank you Damian Conway
"set hlsearch
nnoremap <silent> n	n:call HLNext(0.4)<cr>
nnoremap <silent> N	N:call HLNext(0.4)<cr>
function! HLNext (blinktime)
	set invcursorline
	redraw
	exec 'sleep ' . float2nr(a:blinktime * 1000) . 'm'
	set invcursorline
	redraw
endfunction


" DOC format MEMORY
if has("autocmd")
	au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif


" EasyMOTION
" don't map leader, use it for a bunch of YCM commands
"map <Leader> <Plug>(easymotion-prefix)
map  / <Plug>(easymotion-sn)
omap / <Plug>(easymotion-tn)
let g:EasyMotion_smartcase = 1


" Tabularize
" Can't seem to find a way to run command against character under cursor
"nnoremap <c-a> :Tabularize /<C-R><C-W>
noremap <c-a> :Tabularize /


" NAVIGATION
" movement shortcuts
nnoremap <C-h> gT
nnoremap <C-j> zj
nnoremap <C-k> zk
nnoremap <C-l> gt
" save-quit all tabs
nnoremap <C-\>q :tabdo q<CR>
nnoremap <C-\>Q :tabdo q!<CR>
nnoremap <C-\>w :tabdo w<CR>
nnoremap <C-\>z :tabdo wq<CR>


"TODO: figure out what these do and whether it would be a good idea
"set formatoptions-=o "dont continue comments when pushing o/O
"
""vertical/horizontal scroll off settings
"set scrolloff=3
"set sidescrolloff=7
"set sidescroll=1

""nerdtree settings
"let g:NERDTreeMouseMode = 2
"let g:NERDTreeWinSize = 40
"let g:ctrlp_user_command = ['.git/', 'git --git-dir=%s/.git ls-files -oc --exclude-standard']

""explorer mappings
"nnoremap <f1> :BufExplorer<cr>
"nnoremap <f3> :TagbarToggle<cr>
"nnoremap <Leader>o :NERDTreeToggle<CR>
"nnoremap <Leader>/ /\c

""make <c-l> clear the highlight as well as redraw
"nnoremap <C-L> :nohls<CR><C-L>
"inoremap <C-L> <C-O>:nohls<CR>
"inoremap <C-e> <C-o>$

""map Q to line wrapping
"noremap Q gq

""make Y consistent with C and D
"nnoremap Y y$

""visual search mappings
"function! s:VSetSearch()
"    let temp = @@
"    norm! gvy
"    let @/ = '\V' . substitute(escape(@@, '\'), '\n', '\\n', 'g')
"    let @@ = temp
"endfunction
"vnoremap * :<C-u>call <SID>VSetSearch()<CR>//<CR>
"vnoremap # :<C-u>call <SID>VSetSearch()<CR>??<CR>

"set guioptions-=m "remove menu
"set guioptions-=T "remove toolbar
"set guioptions-=r "remove scroll bar right
"set guioptions-=L "remove scroll bar left
