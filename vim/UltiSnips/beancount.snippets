# Files which follow the 'YYYY-MM-DD.payee - narration - doc.pdf' format
#+	should become 'document' entries
snippet "^([0-9-]{10})\.(.*) - (.*) - doc\.pdf$" "filename -> document" r
`!p
# get only the first account 'open' statement
reg = re.compile('^[0-9-]{10}\s+open\s+(\S+).*')
acct = next( (	mt.group(1)
		for mt in (reg.match(line) for line in snip.buffer)
		if mt != None ), 
	None )

snip.rv = '{0}\tdocument\t{1}\t"{2}"'.format(match.group(1),
					acct,
					match.group(0))
`
endsnippet

# Files which follow the 'YYYY-MM-DD.payee - statement.pdf' format should become
#+	'balance' entries with an associated 'document:' metadata
snippet "^([0-9-]{10})\.(.*) - [Ss]tatement\.pdf$" "filename -> balance" r
`!p
from datetime import date, timedelta, datetime

# get only the first account 'open' statement
reg = re.compile('^[0-9-]{10}\s+open\s+(\S+).*')
acct = next( (	mt.group(1)
		for mt in (reg.match(line) for line in snip.buffer)
		if mt != None ), 
	None )

# increment the date by 1 day (balance statements are evaluated at start of day)
posting = datetime.strptime(match.group(1), '%Y-%m-%d')
posting += timedelta(days=1)

snip.rv = '{0}\tbalance\t\t{1}\t\n\tdocument:\t"{2}"'.format(
						posting.date(),
						acct,
						match.group(0))
`
endsnippet

# Files which have a 'YYYY-MM-DD.payee - narration.pdf' format,
#+	but NOT matching the 'filename -> document' snippet above.
snippet "^([0-9-]{10})\.(.*) - (.*)(?<! - doc)(?<! - [Ss]tatement)\.pdf$" "filename -> transaction" r
`!p
snip.rv = '{0}\t*\t"{1}"\t\t"{2}"'.format(match.group(1),
					match.group(2),
					match.group(3))

# find all account 'open' statements
reg = re.compile('^[0-9-]{10}\s+open\s+(\S+).*')
accts = [ '\t{0}'.format(mt.group(1))
	for mt in 
		[reg.match(line) for line in snip.buffer]
	if mt != None ]
snip.rv += '\n{0}'.format('\n'.join(accts))
`
endsnippet


# Generic transaction
snippet tr "Transaction" b
${1:`date +%Y`}-${2:`date +%m`}-${3:`date +%d`}	*	"${4:payee}"		"${5:narration}"
endsnippet


# balance entry
snippet bal "Balance" b
`!p
from datetime import date, timedelta, datetime

# get only the first account 'open' statement
reg = re.compile('^[0-9-]{10}\s+open\s+(\S+).*')
acct = next( (	mt.group(1)
		for mt in (reg.match(line) for line in snip.buffer)
		if mt != None ), 
	None )

date_reg = re.compile('^([0-9-]{10}).*')

# Work backwards and get the date for any entry immediately preceding this one.
# There is no F'ING reason for this try block ... except UltiSnips otherwise gives
#+	snip.p.start == 0
#+	... but whyyyyyyyy
try:
	date_str = next( (mt.group(1)
			for mt in (date_reg.match(line)
				for line in reversed(snip.buffer[0:snip.p.start[0]]))
			if mt != None ),
		None )

	# increase date by 1 (balance assertions take effect at the beginning of the day)
	posting = datetime.strptime(date_str, '%Y-%m-%d')
	posting += timedelta(days=1)

	# output balance entry
	snip.rv = '{0}\tbalance\t\t{1}\t'.format(posting.date(), acct)
except:
	pass
`
endsnippet


# Hours entry
snippet hr "hour log entry (assume accounts are on lines 7 and 8 of doc)" b
${1:`date +%Y`}-${2:`date +%m`}-${3:`date +%d`}	*	"${4:project}"		"${5:0900}-${6:1800}; ${7}"
	`!p snip.rv = re.split('\s+', snip.buffer[6])[2]`
`!p
# calculate time based on hours entries
from datetime import timedelta

dl = []
for a in [ t[5], t[6] ]:
	if re.match('^[0-9]{4}$', a):
		tme = re.split('([0-9]{2})', a)
	else:
		tme = re.split('([0-9]{2})', '0900')
	dl.append( timedelta(hours=int(tme[1]), minutes=int(tme[3])) )

# output hours account line with calculated delta
snip.rv = "\t{0}\t{1} T_SB".format( re.split('\s+', snip.buffer[7])[2], round((dl[1] - dl[0]).total_seconds() / 3600, 1) )
`
endsnippet
